--- /home/ubuntu/pytorch-opt/adopter/models/huggingface_transformers/src/transformers/models/pegasus_x/modeling_pegasus_x.py
+++ /home/ubuntu/pytorch-opt/adopter/models/huggingface_transformers/src/transformers/models/pegasus_x/modeling_pegasus_x.py
@@ -261,7 +261,7 @@
             attn_weights = attn_weights.view(bsz, self.num_heads, tgt_len, src_len) + attention_mask
             attn_weights = attn_weights.view(bsz * self.num_heads, tgt_len, src_len)
 
-        attn_weights = nn.functional.softmax(attn_weights, dim=-1)
+        from xformers.triton.softmax import softmax as softmax_softmax; attn_weights = softmax_softmax(attn_weights)
 
         if layer_head_mask is not None:
             if layer_head_mask.size() != (self.num_heads,):
@@ -467,7 +467,7 @@
         # [batch_size, num_heads, global_len, global_len+padded_seq_len]
         attn_weights = torch.einsum("BHGF,BHXF->BHGX", global_q, global_and_local_k)
         attn_weights = attn_weights + extended_mask[:, None, None, :]
-        attn_probs = nn.functional.softmax(attn_weights, dim=-1)
+        from xformers.triton.softmax import softmax as softmax_softmax; attn_probs = softmax_softmax(attn_weights)
         attn_probs = nn.functional.dropout(attn_probs, p=self.dropout, training=self.training)
 
         # [batch_size, num_heads, global_len, F]
@@ -521,7 +521,7 @@
         # [batch_size, num_heads, num_blocks, block_size, global_len+block_size]
         attn_weights = torch.cat([blocked_local2global, blocked_local2local], dim=-1)
         attn_weights = attn_weights + extended_mask[:, None, :, None, :]
-        attn_probs = nn.functional.softmax(attn_weights, dim=-1)
+        from xformers.triton.softmax import softmax as softmax_softmax; attn_probs = softmax_softmax(attn_weights)
         attn_probs = nn.functional.dropout(attn_probs, p=self.dropout, training=self.training)
 
         # [batch_size, num_heads, num_blocks, block_size, global_len]
